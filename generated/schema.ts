// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LiquidityPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidityPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidityPosition", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPosition | null {
    return changetype<LiquidityPosition | null>(
      store.get("LiquidityPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get tokenTicker(): string {
    let value = this.get("tokenTicker");
    return value!.toString();
  }

  set tokenTicker(value: string) {
    this.set("tokenTicker", Value.fromString(value));
  }

  get noOfTokens(): BigInt {
    let value = this.get("noOfTokens");
    return value!.toBigInt();
  }

  set noOfTokens(value: BigInt) {
    this.set("noOfTokens", Value.fromBigInt(value));
  }

  get noOfTokensLeft(): BigInt {
    let value = this.get("noOfTokensLeft");
    return value!.toBigInt();
  }

  set noOfTokensLeft(value: BigInt) {
    this.set("noOfTokensLeft", Value.fromBigInt(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get addTimestamp(): BigInt {
    let value = this.get("addTimestamp");
    return value!.toBigInt();
  }

  set addTimestamp(value: BigInt) {
    this.set("addTimestamp", Value.fromBigInt(value));
  }

  get removeTimestamp(): BigInt {
    let value = this.get("removeTimestamp");
    return value!.toBigInt();
  }

  set removeTimestamp(value: BigInt) {
    this.set("removeTimestamp", Value.fromBigInt(value));
  }
}

export class ClaimedReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClaimedReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimedReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimedReward", id.toString(), this);
    }
  }

  static load(id: string): ClaimedReward | null {
    return changetype<ClaimedReward | null>(store.get("ClaimedReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get tokenTicker(): string {
    let value = this.get("tokenTicker");
    return value!.toString();
  }

  set tokenTicker(value: string) {
    this.set("tokenTicker", Value.fromString(value));
  }

  get noOfTokens(): BigInt {
    let value = this.get("noOfTokens");
    return value!.toBigInt();
  }

  set noOfTokens(value: BigInt) {
    this.set("noOfTokens", Value.fromBigInt(value));
  }

  get claimTimestamp(): BigInt {
    let value = this.get("claimTimestamp");
    return value!.toBigInt();
  }

  set claimTimestamp(value: BigInt) {
    this.set("claimTimestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}
