// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BridgeTransactionEnd extends ethereum.Event {
  get params(): BridgeTransactionEnd__Params {
    return new BridgeTransactionEnd__Params(this);
  }
}

export class BridgeTransactionEnd__Params {
  _event: BridgeTransactionEnd;

  constructor(event: BridgeTransactionEnd) {
    this._event = event;
  }

  get transferIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fromChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toChainId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[4].value.toString();
  }

  get status(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class BridgeTransactionInit extends ethereum.Event {
  get params(): BridgeTransactionInit__Params {
    return new BridgeTransactionInit__Params(this);
  }
}

export class BridgeTransactionInit__Params {
  _event: BridgeTransactionInit;

  constructor(event: BridgeTransactionInit) {
    this._event = event;
  }

  get transferIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get toChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[3].value.toString();
  }

  get noOfTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CrossTalkReceive extends ethereum.Event {
  get params(): CrossTalkReceive__Params {
    return new CrossTalkReceive__Params(this);
  }
}

export class CrossTalkReceive__Params {
  _event: CrossTalkReceive;

  constructor(event: CrossTalkReceive) {
    this._event = event;
  }

  get sourceChain(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get destChain(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sourceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CrossTalkSend extends ethereum.Event {
  get params(): CrossTalkSend__Params {
    return new CrossTalkSend__Params(this);
  }
}

export class CrossTalkSend__Params {
  _event: CrossTalkSend;

  constructor(event: CrossTalkSend) {
    this._event = event;
  }

  get sourceChain(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get destChain(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get sourceAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get destinationAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _selector(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _data(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get _hash(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Linkevent extends ethereum.Event {
  get params(): Linkevent__Params {
    return new Linkevent__Params(this);
  }
}

export class Linkevent__Params {
  _event: Linkevent;

  constructor(event: Linkevent) {
    this._event = event;
  }

  get ChainID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get linkedContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[2].value.toString();
  }

  get noOfTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenTicker(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Unlinkevent extends ethereum.Event {
  get params(): Unlinkevent__Params {
    return new Unlinkevent__Params(this);
  }
}

export class Unlinkevent__Params {
  _event: Unlinkevent;

  constructor(event: Unlinkevent) {
    this._event = event;
  }

  get ChainID(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get linkedContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BridgeUpgradeable__boosterConfigResult {
  value0: Address;
  value1: BigInt;
  value2: string;
  value3: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: string,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getTokenAddress(): Address {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getImageUrl(): string {
    return this.value2;
  }

  getAdminAccount(): Address {
    return this.value3;
  }
}

export class BridgeUpgradeable__crossChainTransferOutResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class BridgeUpgradeable__epochsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getStartBlock(): BigInt {
    return this.value0;
  }

  getEpochLength(): BigInt {
    return this.value1;
  }

  getTotalFeesCollected(): BigInt {
    return this.value2;
  }

  getTotalActiveLiquidity(): BigInt {
    return this.value3;
  }

  getNoOfDepositors(): BigInt {
    return this.value4;
  }
}

export class BridgeUpgradeable__fetchExecutesResultValue0Struct extends ethereum.Tuple {
  get chainID(): i32 {
    return this[0].toI32();
  }

  get nonce(): BigInt {
    return this[1].toBigInt();
  }
}

export class BridgeUpgradeable__liquidityPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getDepositedAmount(): BigInt {
    return this.value0;
  }

  getBlockNo(): BigInt {
    return this.value1;
  }

  getClaimedTillEpochIndex(): BigInt {
    return this.value2;
  }

  getEpochStartIndex(): BigInt {
    return this.value3;
  }

  getEpochStartBlock(): BigInt {
    return this.value4;
  }

  getBoosterEndEpochIndex(): BigInt {
    return this.value5;
  }

  getStartTimestamp(): BigInt {
    return this.value6;
  }
}

export class BridgeUpgradeable__routerSyncResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class BridgeUpgradeable__transferInResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class BridgeUpgradeable extends ethereum.SmartContract {
  static bind(address: Address): BridgeUpgradeable {
    return new BridgeUpgradeable("BridgeUpgradeable", address);
  }

  boosterConfig(): BridgeUpgradeable__boosterConfigResult {
    let result = super.call(
      "boosterConfig",
      "boosterConfig():(address,uint256,string,address)",
      []
    );

    return new BridgeUpgradeable__boosterConfigResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toAddress()
    );
  }

  try_boosterConfig(): ethereum.CallResult<
    BridgeUpgradeable__boosterConfigResult
  > {
    let result = super.tryCall(
      "boosterConfig",
      "boosterConfig():(address,uint256,string,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__boosterConfigResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toAddress()
      )
    );
  }

  bridgeUtilsUpgradeable(): Address {
    let result = super.call(
      "bridgeUtilsUpgradeable",
      "bridgeUtilsUpgradeable():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bridgeUtilsUpgradeable(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bridgeUtilsUpgradeable",
      "bridgeUtilsUpgradeable():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  chainId(): i32 {
    let result = super.call("chainId", "chainId():(uint8)", []);

    return result[0].toI32();
  }

  try_chainId(): ethereum.CallResult<i32> {
    let result = super.tryCall("chainId", "chainId():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  crossChainGas(): BigInt {
    let result = super.call("crossChainGas", "crossChainGas():(uint256)", []);

    return result[0].toBigInt();
  }

  try_crossChainGas(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "crossChainGas",
      "crossChainGas():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crossChainTransferOut(
    _tokenTicker: string,
    _noOfTokens: BigInt,
    _toChainId: i32,
    _gasPrice: BigInt
  ): BridgeUpgradeable__crossChainTransferOutResult {
    let result = super.call(
      "crossChainTransferOut",
      "crossChainTransferOut(string,uint256,uint8,uint256):(bool,uint256)",
      [
        ethereum.Value.fromString(_tokenTicker),
        ethereum.Value.fromUnsignedBigInt(_noOfTokens),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_toChainId)),
        ethereum.Value.fromUnsignedBigInt(_gasPrice)
      ]
    );

    return new BridgeUpgradeable__crossChainTransferOutResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_crossChainTransferOut(
    _tokenTicker: string,
    _noOfTokens: BigInt,
    _toChainId: i32,
    _gasPrice: BigInt
  ): ethereum.CallResult<BridgeUpgradeable__crossChainTransferOutResult> {
    let result = super.tryCall(
      "crossChainTransferOut",
      "crossChainTransferOut(string,uint256,uint8,uint256):(bool,uint256)",
      [
        ethereum.Value.fromString(_tokenTicker),
        ethereum.Value.fromUnsignedBigInt(_noOfTokens),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_toChainId)),
        ethereum.Value.fromUnsignedBigInt(_gasPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__crossChainTransferOutResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  currentIndex(param0: string, param1: Address): BigInt {
    let result = super.call(
      "currentIndex",
      "currentIndex(string,address):(uint256)",
      [ethereum.Value.fromString(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_currentIndex(
    param0: string,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentIndex",
      "currentIndex(string,address):(uint256)",
      [ethereum.Value.fromString(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTransferIndex(param0: Bytes): BigInt {
    let result = super.call(
      "currentTransferIndex",
      "currentTransferIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_currentTransferIndex(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTransferIndex",
      "currentTransferIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochs(param0: string, param1: BigInt): BridgeUpgradeable__epochsResult {
    let result = super.call(
      "epochs",
      "epochs(string,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new BridgeUpgradeable__epochsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_epochs(
    param0: string,
    param1: BigInt
  ): ethereum.CallResult<BridgeUpgradeable__epochsResult> {
    let result = super.tryCall(
      "epochs",
      "epochs(string,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__epochsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  feePoolUpgradeable(): Address {
    let result = super.call(
      "feePoolUpgradeable",
      "feePoolUpgradeable():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_feePoolUpgradeable(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feePoolUpgradeable",
      "feePoolUpgradeable():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchExecutes(
    hash: Bytes
  ): BridgeUpgradeable__fetchExecutesResultValue0Struct {
    let result = super.call(
      "fetchExecutes",
      "fetchExecutes(bytes32):((uint8,uint64))",
      [ethereum.Value.fromFixedBytes(hash)]
    );

    return changetype<BridgeUpgradeable__fetchExecutesResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_fetchExecutes(
    hash: Bytes
  ): ethereum.CallResult<BridgeUpgradeable__fetchExecutesResultValue0Struct> {
    let result = super.tryCall(
      "fetchExecutes",
      "fetchExecutes(bytes32):((uint8,uint64))",
      [ethereum.Value.fromFixedBytes(hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BridgeUpgradeable__fetchExecutesResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  fetchFeeToken(): Address {
    let result = super.call("fetchFeeToken", "fetchFeeToken():(address)", []);

    return result[0].toAddress();
  }

  try_fetchFeeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fetchFeeToken",
      "fetchFeeToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchHandler(): Address {
    let result = super.call("fetchHandler", "fetchHandler():(address)", []);

    return result[0].toAddress();
  }

  try_fetchHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall("fetchHandler", "fetchHandler():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchLink(_chainID: i32): Address {
    let result = super.call("fetchLink", "fetchLink(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_chainID))
    ]);

    return result[0].toAddress();
  }

  try_fetchLink(_chainID: i32): ethereum.CallResult<Address> {
    let result = super.tryCall("fetchLink", "fetchLink(uint8):(address)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_chainID))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fetchLinkSetter(): Address {
    let result = super.call(
      "fetchLinkSetter",
      "fetchLinkSetter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fetchLinkSetter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fetchLinkSetter",
      "fetchLinkSetter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEpochsLength(_tokenTicker: string): BigInt {
    let result = super.call(
      "getEpochsLength",
      "getEpochsLength(string):(uint256)",
      [ethereum.Value.fromString(_tokenTicker)]
    );

    return result[0].toBigInt();
  }

  try_getEpochsLength(_tokenTicker: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochsLength",
      "getEpochsLength(string):(uint256)",
      [ethereum.Value.fromString(_tokenTicker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getToken(_tokenTicker: string): Address {
    let result = super.call("getToken", "getToken(string):(address)", [
      ethereum.Value.fromString(_tokenTicker)
    ]);

    return result[0].toAddress();
  }

  try_getToken(_tokenTicker: string): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken(string):(address)", [
      ethereum.Value.fromString(_tokenTicker)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasBooster(
    param0: string,
    param1: Address,
    param2: BigInt,
    param3: BigInt
  ): boolean {
    let result = super.call(
      "hasBooster",
      "hasBooster(string,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasBooster(
    param0: string,
    param1: Address,
    param2: BigInt,
    param3: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasBooster",
      "hasBooster(string,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidityPosition(
    param0: string,
    param1: Address,
    param2: BigInt
  ): BridgeUpgradeable__liquidityPositionResult {
    let result = super.call(
      "liquidityPosition",
      "liquidityPosition(string,address,uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new BridgeUpgradeable__liquidityPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_liquidityPosition(
    param0: string,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BridgeUpgradeable__liquidityPositionResult> {
    let result = super.tryCall(
      "liquidityPosition",
      "liquidityPosition(string,address,uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__liquidityPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  maxBips(): BigInt {
    let result = super.call("maxBips", "maxBips():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBips(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBips", "maxBips():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextEpochBlock(param0: string): BigInt {
    let result = super.call(
      "nextEpochBlock",
      "nextEpochBlock(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBigInt();
  }

  try_nextEpochBlock(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextEpochBlock",
      "nextEpochBlock(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routerSync(
    srcChainID: i32,
    srcAddress: Address,
    data: Bytes
  ): BridgeUpgradeable__routerSyncResult {
    let result = super.call(
      "routerSync",
      "routerSync(uint8,address,bytes):(bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(srcChainID)),
        ethereum.Value.fromAddress(srcAddress),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new BridgeUpgradeable__routerSyncResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_routerSync(
    srcChainID: i32,
    srcAddress: Address,
    data: Bytes
  ): ethereum.CallResult<BridgeUpgradeable__routerSyncResult> {
    let result = super.tryCall(
      "routerSync",
      "routerSync(uint8,address,bytes):(bool,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(srcChainID)),
        ethereum.Value.fromAddress(srcAddress),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__routerSyncResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenBridgeRegistryUpgradeable(): Address {
    let result = super.call(
      "tokenBridgeRegistryUpgradeable",
      "tokenBridgeRegistryUpgradeable():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenBridgeRegistryUpgradeable(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenBridgeRegistryUpgradeable",
      "tokenBridgeRegistryUpgradeable():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalBoostedUsers(param0: string, param1: BigInt): BigInt {
    let result = super.call(
      "totalBoostedUsers",
      "totalBoostedUsers(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalBoostedUsers(
    param0: string,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBoostedUsers",
      "totalBoostedUsers(string,uint256):(uint256)",
      [
        ethereum.Value.fromString(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLiquidity(param0: string): BigInt {
    let result = super.call(
      "totalLiquidity",
      "totalLiquidity(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalLiquidity(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLiquidity",
      "totalLiquidity(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLpLiquidity(param0: string): BigInt {
    let result = super.call(
      "totalLpLiquidity",
      "totalLpLiquidity(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalLpLiquidity(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLpLiquidity",
      "totalLpLiquidity(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferIn(
    _tokenTicker: string,
    _noOfTokens: BigInt,
    _toChainId: i32,
    _gasPrice: BigInt
  ): BridgeUpgradeable__transferInResult {
    let result = super.call(
      "transferIn",
      "transferIn(string,uint256,uint8,uint256):(bool,uint256)",
      [
        ethereum.Value.fromString(_tokenTicker),
        ethereum.Value.fromUnsignedBigInt(_noOfTokens),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_toChainId)),
        ethereum.Value.fromUnsignedBigInt(_gasPrice)
      ]
    );

    return new BridgeUpgradeable__transferInResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_transferIn(
    _tokenTicker: string,
    _noOfTokens: BigInt,
    _toChainId: i32,
    _gasPrice: BigInt
  ): ethereum.CallResult<BridgeUpgradeable__transferInResult> {
    let result = super.tryCall(
      "transferIn",
      "transferIn(string,uint256,uint8,uint256):(bool,uint256)",
      [
        ethereum.Value.fromString(_tokenTicker),
        ethereum.Value.fromUnsignedBigInt(_noOfTokens),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_toChainId)),
        ethereum.Value.fromUnsignedBigInt(_gasPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BridgeUpgradeable__transferInResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  transferMapping(param0: Bytes): BigInt {
    let result = super.call(
      "transferMapping",
      "transferMapping(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_transferMapping(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferMapping",
      "transferMapping(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }

  get _chainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _linkedContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class UnlinkCall extends ethereum.Call {
  get inputs(): UnlinkCall__Inputs {
    return new UnlinkCall__Inputs(this);
  }

  get outputs(): UnlinkCall__Outputs {
    return new UnlinkCall__Outputs(this);
  }
}

export class UnlinkCall__Inputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }

  get _chainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UnlinkCall__Outputs {
  _call: UnlinkCall;

  constructor(call: UnlinkCall) {
    this._call = call;
  }
}

export class _addPassedEpochsCall extends ethereum.Call {
  get inputs(): _addPassedEpochsCall__Inputs {
    return new _addPassedEpochsCall__Inputs(this);
  }

  get outputs(): _addPassedEpochsCall__Outputs {
    return new _addPassedEpochsCall__Outputs(this);
  }
}

export class _addPassedEpochsCall__Inputs {
  _call: _addPassedEpochsCall;

  constructor(call: _addPassedEpochsCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class _addPassedEpochsCall__Outputs {
  _call: _addPassedEpochsCall;

  constructor(call: _addPassedEpochsCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _noOfBoosters(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class ApproveRouterFeeCall extends ethereum.Call {
  get inputs(): ApproveRouterFeeCall__Inputs {
    return new ApproveRouterFeeCall__Inputs(this);
  }

  get outputs(): ApproveRouterFeeCall__Outputs {
    return new ApproveRouterFeeCall__Outputs(this);
  }
}

export class ApproveRouterFeeCall__Inputs {
  _call: ApproveRouterFeeCall;

  constructor(call: ApproveRouterFeeCall) {
    this._call = call;
  }

  get _feeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveRouterFeeCall__Outputs {
  _call: ApproveRouterFeeCall;

  constructor(call: ApproveRouterFeeCall) {
    this._call = call;
  }
}

export class BuyBoosterPacksCall extends ethereum.Call {
  get inputs(): BuyBoosterPacksCall__Inputs {
    return new BuyBoosterPacksCall__Inputs(this);
  }

  get outputs(): BuyBoosterPacksCall__Outputs {
    return new BuyBoosterPacksCall__Outputs(this);
  }
}

export class BuyBoosterPacksCall__Inputs {
  _call: BuyBoosterPacksCall;

  constructor(call: BuyBoosterPacksCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyBoosterPacksCall__Outputs {
  _call: BuyBoosterPacksCall;

  constructor(call: BuyBoosterPacksCall) {
    this._call = call;
  }
}

export class CreateCrossChainTransferMappingCall extends ethereum.Call {
  get inputs(): CreateCrossChainTransferMappingCall__Inputs {
    return new CreateCrossChainTransferMappingCall__Inputs(this);
  }

  get outputs(): CreateCrossChainTransferMappingCall__Outputs {
    return new CreateCrossChainTransferMappingCall__Outputs(this);
  }
}

export class CreateCrossChainTransferMappingCall__Inputs {
  _call: CreateCrossChainTransferMappingCall;

  constructor(call: CreateCrossChainTransferMappingCall) {
    this._call = call;
  }

  get _userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenTicker(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _transferIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fromChain(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class CreateCrossChainTransferMappingCall__Outputs {
  _call: CreateCrossChainTransferMappingCall;

  constructor(call: CreateCrossChainTransferMappingCall) {
    this._call = call;
  }
}

export class CrossChainTransferInCall extends ethereum.Call {
  get inputs(): CrossChainTransferInCall__Inputs {
    return new CrossChainTransferInCall__Inputs(this);
  }

  get outputs(): CrossChainTransferInCall__Outputs {
    return new CrossChainTransferInCall__Outputs(this);
  }
}

export class CrossChainTransferInCall__Inputs {
  _call: CrossChainTransferInCall;

  constructor(call: CrossChainTransferInCall) {
    this._call = call;
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenTicker(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fromChain(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CrossChainTransferInCall__Outputs {
  _call: CrossChainTransferInCall;

  constructor(call: CrossChainTransferInCall) {
    this._call = call;
  }
}

export class CrossChainTransferOutCall extends ethereum.Call {
  get inputs(): CrossChainTransferOutCall__Inputs {
    return new CrossChainTransferOutCall__Inputs(this);
  }

  get outputs(): CrossChainTransferOutCall__Outputs {
    return new CrossChainTransferOutCall__Outputs(this);
  }
}

export class CrossChainTransferOutCall__Inputs {
  _call: CrossChainTransferOutCall;

  constructor(call: CrossChainTransferOutCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _toChainId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _gasPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CrossChainTransferOutCall__Outputs {
  _call: CrossChainTransferOutCall;

  constructor(call: CrossChainTransferOutCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DeleteHasBoosterMappingCall extends ethereum.Call {
  get inputs(): DeleteHasBoosterMappingCall__Inputs {
    return new DeleteHasBoosterMappingCall__Inputs(this);
  }

  get outputs(): DeleteHasBoosterMappingCall__Outputs {
    return new DeleteHasBoosterMappingCall__Outputs(this);
  }
}

export class DeleteHasBoosterMappingCall__Inputs {
  _call: DeleteHasBoosterMappingCall;

  constructor(call: DeleteHasBoosterMappingCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get epochIndex(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeleteHasBoosterMappingCall__Outputs {
  _call: DeleteHasBoosterMappingCall;

  constructor(call: DeleteHasBoosterMappingCall) {
    this._call = call;
  }
}

export class GetBackNativeTokensCall extends ethereum.Call {
  get inputs(): GetBackNativeTokensCall__Inputs {
    return new GetBackNativeTokensCall__Inputs(this);
  }

  get outputs(): GetBackNativeTokensCall__Outputs {
    return new GetBackNativeTokensCall__Outputs(this);
  }
}

export class GetBackNativeTokensCall__Inputs {
  _call: GetBackNativeTokensCall;

  constructor(call: GetBackNativeTokensCall) {
    this._call = call;
  }
}

export class GetBackNativeTokensCall__Outputs {
  _call: GetBackNativeTokensCall;

  constructor(call: GetBackNativeTokensCall) {
    this._call = call;
  }
}

export class GetBackTokensCall extends ethereum.Call {
  get inputs(): GetBackTokensCall__Inputs {
    return new GetBackTokensCall__Inputs(this);
  }

  get outputs(): GetBackTokensCall__Outputs {
    return new GetBackTokensCall__Outputs(this);
  }
}

export class GetBackTokensCall__Inputs {
  _call: GetBackTokensCall;

  constructor(call: GetBackTokensCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetBackTokensCall__Outputs {
  _call: GetBackTokensCall;

  constructor(call: GetBackTokensCall) {
    this._call = call;
  }
}

export class InitNextEpochBlockCall extends ethereum.Call {
  get inputs(): InitNextEpochBlockCall__Inputs {
    return new InitNextEpochBlockCall__Inputs(this);
  }

  get outputs(): InitNextEpochBlockCall__Outputs {
    return new InitNextEpochBlockCall__Outputs(this);
  }
}

export class InitNextEpochBlockCall__Inputs {
  _call: InitNextEpochBlockCall;

  constructor(call: InitNextEpochBlockCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get epochLength(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitNextEpochBlockCall__Outputs {
  _call: InitNextEpochBlockCall;

  constructor(call: InitNextEpochBlockCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _tokenBridgeRegistryUpgradeable(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _genericHandler(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _chainId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenTicker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReplayTransactionCall extends ethereum.Call {
  get inputs(): ReplayTransactionCall__Inputs {
    return new ReplayTransactionCall__Inputs(this);
  }

  get outputs(): ReplayTransactionCall__Outputs {
    return new ReplayTransactionCall__Outputs(this);
  }
}

export class ReplayTransactionCall__Inputs {
  _call: ReplayTransactionCall;

  constructor(call: ReplayTransactionCall) {
    this._call = call;
  }

  get hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _crossChainGasPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReplayTransactionCall__Outputs {
  _call: ReplayTransactionCall;

  constructor(call: ReplayTransactionCall) {
    this._call = call;
  }
}

export class RouterSyncCall extends ethereum.Call {
  get inputs(): RouterSyncCall__Inputs {
    return new RouterSyncCall__Inputs(this);
  }

  get outputs(): RouterSyncCall__Outputs {
    return new RouterSyncCall__Outputs(this);
  }
}

export class RouterSyncCall__Inputs {
  _call: RouterSyncCall;

  constructor(call: RouterSyncCall) {
    this._call = call;
  }

  get srcChainID(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get srcAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RouterSyncCall__Outputs {
  _call: RouterSyncCall;

  constructor(call: RouterSyncCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class SafeWithdrawLiquidityCall extends ethereum.Call {
  get inputs(): SafeWithdrawLiquidityCall__Inputs {
    return new SafeWithdrawLiquidityCall__Inputs(this);
  }

  get outputs(): SafeWithdrawLiquidityCall__Outputs {
    return new SafeWithdrawLiquidityCall__Outputs(this);
  }
}

export class SafeWithdrawLiquidityCall__Inputs {
  _call: SafeWithdrawLiquidityCall;

  constructor(call: SafeWithdrawLiquidityCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SafeWithdrawLiquidityCall__Outputs {
  _call: SafeWithdrawLiquidityCall;

  constructor(call: SafeWithdrawLiquidityCall) {
    this._call = call;
  }
}

export class SetFeeTokenAddressCall extends ethereum.Call {
  get inputs(): SetFeeTokenAddressCall__Inputs {
    return new SetFeeTokenAddressCall__Inputs(this);
  }

  get outputs(): SetFeeTokenAddressCall__Outputs {
    return new SetFeeTokenAddressCall__Outputs(this);
  }
}

export class SetFeeTokenAddressCall__Inputs {
  _call: SetFeeTokenAddressCall;

  constructor(call: SetFeeTokenAddressCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeTokenAddressCall__Outputs {
  _call: SetFeeTokenAddressCall;

  constructor(call: SetFeeTokenAddressCall) {
    this._call = call;
  }
}

export class SetLinkerCall extends ethereum.Call {
  get inputs(): SetLinkerCall__Inputs {
    return new SetLinkerCall__Inputs(this);
  }

  get outputs(): SetLinkerCall__Outputs {
    return new SetLinkerCall__Outputs(this);
  }
}

export class SetLinkerCall__Inputs {
  _call: SetLinkerCall;

  constructor(call: SetLinkerCall) {
    this._call = call;
  }

  get _linker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLinkerCall__Outputs {
  _call: SetLinkerCall;

  constructor(call: SetLinkerCall) {
    this._call = call;
  }
}

export class TransferInCall extends ethereum.Call {
  get inputs(): TransferInCall__Inputs {
    return new TransferInCall__Inputs(this);
  }

  get outputs(): TransferInCall__Outputs {
    return new TransferInCall__Outputs(this);
  }
}

export class TransferInCall__Inputs {
  _call: TransferInCall;

  constructor(call: TransferInCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _toChainId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _gasPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferInCall__Outputs {
  _call: TransferInCall;

  constructor(call: TransferInCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferOutCall extends ethereum.Call {
  get inputs(): TransferOutCall__Inputs {
    return new TransferOutCall__Inputs(this);
  }

  get outputs(): TransferOutCall__Outputs {
    return new TransferOutCall__Outputs(this);
  }
}

export class TransferOutCall__Inputs {
  _call: TransferOutCall;

  constructor(call: TransferOutCall) {
    this._call = call;
  }

  get _noOfTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenTicker(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class TransferOutCall__Outputs {
  _call: TransferOutCall;

  constructor(call: TransferOutCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBoosterConfigCall extends ethereum.Call {
  get inputs(): UpdateBoosterConfigCall__Inputs {
    return new UpdateBoosterConfigCall__Inputs(this);
  }

  get outputs(): UpdateBoosterConfigCall__Outputs {
    return new UpdateBoosterConfigCall__Outputs(this);
  }
}

export class UpdateBoosterConfigCall__Inputs {
  _call: UpdateBoosterConfigCall;

  constructor(call: UpdateBoosterConfigCall) {
    this._call = call;
  }

  get _adminAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _boosterToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _perBoosterPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _imageUrl(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateBoosterConfigCall__Outputs {
  _call: UpdateBoosterConfigCall;

  constructor(call: UpdateBoosterConfigCall) {
    this._call = call;
  }
}

export class UpdateBridgeUtilsAddressCall extends ethereum.Call {
  get inputs(): UpdateBridgeUtilsAddressCall__Inputs {
    return new UpdateBridgeUtilsAddressCall__Inputs(this);
  }

  get outputs(): UpdateBridgeUtilsAddressCall__Outputs {
    return new UpdateBridgeUtilsAddressCall__Outputs(this);
  }
}

export class UpdateBridgeUtilsAddressCall__Inputs {
  _call: UpdateBridgeUtilsAddressCall;

  constructor(call: UpdateBridgeUtilsAddressCall) {
    this._call = call;
  }

  get _bridgeUtilsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBridgeUtilsAddressCall__Outputs {
  _call: UpdateBridgeUtilsAddressCall;

  constructor(call: UpdateBridgeUtilsAddressCall) {
    this._call = call;
  }
}

export class UpdateCrossChainGasCall extends ethereum.Call {
  get inputs(): UpdateCrossChainGasCall__Inputs {
    return new UpdateCrossChainGasCall__Inputs(this);
  }

  get outputs(): UpdateCrossChainGasCall__Outputs {
    return new UpdateCrossChainGasCall__Outputs(this);
  }
}

export class UpdateCrossChainGasCall__Inputs {
  _call: UpdateCrossChainGasCall;

  constructor(call: UpdateCrossChainGasCall) {
    this._call = call;
  }

  get _newGasAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCrossChainGasCall__Outputs {
  _call: UpdateCrossChainGasCall;

  constructor(call: UpdateCrossChainGasCall) {
    this._call = call;
  }
}

export class UpdateFeePoolAddressCall extends ethereum.Call {
  get inputs(): UpdateFeePoolAddressCall__Inputs {
    return new UpdateFeePoolAddressCall__Inputs(this);
  }

  get outputs(): UpdateFeePoolAddressCall__Outputs {
    return new UpdateFeePoolAddressCall__Outputs(this);
  }
}

export class UpdateFeePoolAddressCall__Inputs {
  _call: UpdateFeePoolAddressCall;

  constructor(call: UpdateFeePoolAddressCall) {
    this._call = call;
  }

  get _feePoolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeePoolAddressCall__Outputs {
  _call: UpdateFeePoolAddressCall;

  constructor(call: UpdateFeePoolAddressCall) {
    this._call = call;
  }
}

export class UpdateMaxBipsCall extends ethereum.Call {
  get inputs(): UpdateMaxBipsCall__Inputs {
    return new UpdateMaxBipsCall__Inputs(this);
  }

  get outputs(): UpdateMaxBipsCall__Outputs {
    return new UpdateMaxBipsCall__Outputs(this);
  }
}

export class UpdateMaxBipsCall__Inputs {
  _call: UpdateMaxBipsCall;

  constructor(call: UpdateMaxBipsCall) {
    this._call = call;
  }

  get _newMaxBips(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxBipsCall__Outputs {
  _call: UpdateMaxBipsCall;

  constructor(call: UpdateMaxBipsCall) {
    this._call = call;
  }
}

export class UpdateRegistryAddressCall extends ethereum.Call {
  get inputs(): UpdateRegistryAddressCall__Inputs {
    return new UpdateRegistryAddressCall__Inputs(this);
  }

  get outputs(): UpdateRegistryAddressCall__Outputs {
    return new UpdateRegistryAddressCall__Outputs(this);
  }
}

export class UpdateRegistryAddressCall__Inputs {
  _call: UpdateRegistryAddressCall;

  constructor(call: UpdateRegistryAddressCall) {
    this._call = call;
  }

  get _registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRegistryAddressCall__Outputs {
  _call: UpdateRegistryAddressCall;

  constructor(call: UpdateRegistryAddressCall) {
    this._call = call;
  }
}

export class UpdateRewardClaimedTillIndexCall extends ethereum.Call {
  get inputs(): UpdateRewardClaimedTillIndexCall__Inputs {
    return new UpdateRewardClaimedTillIndexCall__Inputs(this);
  }

  get outputs(): UpdateRewardClaimedTillIndexCall__Outputs {
    return new UpdateRewardClaimedTillIndexCall__Outputs(this);
  }
}

export class UpdateRewardClaimedTillIndexCall__Inputs {
  _call: UpdateRewardClaimedTillIndexCall;

  constructor(call: UpdateRewardClaimedTillIndexCall) {
    this._call = call;
  }

  get _tokenTicker(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateRewardClaimedTillIndexCall__Outputs {
  _call: UpdateRewardClaimedTillIndexCall;

  constructor(call: UpdateRewardClaimedTillIndexCall) {
    this._call = call;
  }
}
